@page "/comments/"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]

<h3 class="card-title">Comments</h3>
<br />

<a href="/comments/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Comments
</a>
<br />
<br />

@if (Comments == null)
{
    <div class="alert alert-info">Loading Comments...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Customer</th>
                <th>Comment</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var comment in Comments)
            {
                <tr>
                    <td>@comment.Customer.Name</td>
                    <td>@comment.Body</td>
                    <td>
                        <a href="/comments/view/@comment.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/comments/edit/@comment.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(comment.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<br />

@code {
    private List<Comment> Comments;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Comments = await _client.GetFromJsonAsync<List<Comment>>($"{Endpoints.CommentsEndpoint}");
    }

    async Task Delete(int commentId)
    {
        var comment = Comments.First(q => q.Id == commentId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {comment.Customer.Name}'s comment?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.CommentsEndpoint}/{commentId}");
            await OnInitializedAsync();
        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
