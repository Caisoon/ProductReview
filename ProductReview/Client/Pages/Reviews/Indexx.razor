@page "/review/"
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@attribute [Authorize]
@inject HttpClient _client



<h3 class="card-title">Reviews</h3>
<br />

<a href="/reviews/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Review
</a>
<br />
<br />



@if (Reviews == null)
{
    <div class="alert alert-info">Loading Reviews...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Review</th>

                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var review in Reviews)
            {
                <tr>
                    <td>@review.Name</td>
                    <td>@review.Body</td>

                    <td>
                        <a href="/products/view/@review.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/products/edit/@review.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(review.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Review> Reviews;

    protected async override Task OnInitializedAsync()
    {
        //_interceptor.MonitorEvent();
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
    }

    async Task Delete(int reviewId)
    {
        var review = Reviews.First(q => q.Id == reviewId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {review.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
            await OnInitializedAsync();
        }
    }
    //public void Dispose()
    //{
    //_interceptor.DisposeEvent();
    //}

}
